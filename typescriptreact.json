{
  "fcSearch": {
    "prefix": "fcSearch",
    "description": "",
    "body": [
      "import React, { useImperativeHandle, forwardRef, ForwardRefRenderFunction } from 'react';",
      "import { Form, Input, Select, DatePicker } from 'antd';",
      "import './search-form.less'",
      "import classnames from 'classnames';",
      "import { StandardProps } from '../../../../types';",
      "import moment from 'moment';",
      "",
      "interface IProps extends StandardProps {",
      "}",
      "",
      "const prefixCls = 'search-form';",
      "",
      "const SearchForm: ForwardRefRenderFunction<any, IProps> = (props: IProps, ref) => {",
      "    const { className, ...otherProps } = props;",
      "    const classNames = classnames(prefixCls, className);",
      "    const [form] = Form.useForm();",
      "",
      "    useImperativeHandle(ref, (): any => {",
      "        return {",
      "            form",
      "        }",
      "    })",
      "",
      "    return (",
      "        <div className={classNames} {...otherProps} >",
      "            <Form form={form} layout=\"inline\" initialValues={{ orgStatus: 1, queryDate: moment() }} >",
      "                <Form.Item",
      "                    style={{ marginBottom: '10px' }}",
      "                    name=\"orgNameSearchText\"",
      "                    label=\"机构名称\"",
      "                >",
      "                    <Input style={{ width: '200px' }} placeholder=\"请选择机构名称\"></Input>",
      "                </Form.Item>",
      "                <Form.Item name=\"queryDate\">",
      "                    <DatePicker allowClear={false} />",
      "                </Form.Item>",
      "                <Form.Item",
      "                    name=\"activeTagList\"",
      "                    label=\"活跃标签\"",
      "                >",
      "                    <Select mode=\"multiple\" placeholder=\"请选择\" style={{ width: 120 }}>",
      "                        <Select.Option value={1}>近期活跃 </Select.Option>",
      "                        <Select.Option value={2}>近期沉默</Select.Option>",
      "                        <Select.Option value={4}>无效</Select.Option>",
      "                        <Select.Option value={3}>已过期</Select.Option>",
      "                    </Select>",
      "                </Form.Item>",
      "            </Form>",
      "        </div>",
      "    );",
      "};",
      "",
      "export default forwardRef(SearchForm) ",
      ""
    ]
  },
  "fcCom": {
    "prefix": "fcCom",
    "description": "",
    "body": [
      "import classnames from 'classnames';",
      "import React, { FC, PropsWithChildren, useRef, useState, useEffect } from 'react';",
      "import \"./index.less\"",
      "import { StandardProps } from '../../../types';",
      "import SearchForm from './components/search-form';",
      "import { Button, Table, message } from 'antd';",
      "import PageHeaderComponent from '../../../components/page-header-component';",
      "import PageContentComponent from '../../../components/page-content-component';",
      "import PageSearchComponent from '../../../components/pageSearch-component';",
      "import { FormInstance } from 'antd/lib/form';",
      "import { antiAdviceColumns } from './columns';",
      "import { TablePaginationConfig } from 'antd/lib/table';",
      "import _ from 'lodash';",
      "import moment from 'moment';",
      "import { Util } from '../../../util';",
      "import {  useSelector } from 'react-redux';",
      "import PageContentTableComponent from '../../../components/page-table-component';",
      "import AntiAdviceServer from '../../../api/anti/advice-server';",
      "import { getOssToSignedUrl } from '../../../util/oss';",
      "",
      "interface IProps extends StandardProps {",
      "}",
      "",
      "",
      "const prefixCls = 'anti-advice';",
      "const dateFormat = 'YYYY-MM-DD HH:mm:ss';",
      "const Index: FC<IProps> = (props: PropsWithChildren<IProps>) => {",
      "    const { className } = props;",
      "    const classNames = classnames(prefixCls, className);",
      "    const searchFormRef = useRef<{ form: FormInstance }>(null);",
      "    const [currentLine, setCurrentLine] = useState({})",
      "",
      "    const { webElements }: any = useSelector<any>(state => state.menuReducer);",
      "",
      "    let columns = antiAdviceColumns({",
      "        openRep: (record: any) => {",
      "            setCurrentLine(record)",
      "        },",
      "        openRemark: (record: any) =>{",
      "            setCurrentLine(record)",
      "        }",
      "    })",
      "    ",
      "    const [result, setResult] = useState<any>({}) // 返回结果",
      "    const [allColumns] = useState<any>(columns) // table 列",
      "    const [currentPagination, setCurrentPagination] = useState<any>({ current: 1, size: 10 })  // 分页",
      "",
      "    const search = () => {",
      "        currentPagination.current = 1",
      "        setCurrentPagination(_.cloneDeep(currentPagination))",
      "        getList()",
      "    }",
      "",
      "    const reset = () => {",
      "        currentPagination.current = 1",
      "        setCurrentPagination(_.cloneDeep(currentPagination))",
      "        searchFormRef?.current?.form?.resetFields()",
      "        getList()",
      "    }",
      "",
      "    useEffect(() => {",
      "        getList()",
      "        // eslint-disable-next-line react-hooks/exhaustive-deps",
      "    }, [])",
      "",
      "    const getParams = ({ hasPagination = false }: { hasPagination?: boolean }) => {",
      "        const { current, size } = currentPagination",
      "        const formData = searchFormRef?.current?.form?.getFieldsValue()",
      "        if(formData.time) {",
      "            formData.startTime = moment(formData.time[0]).startOf('day').format(dateFormat)",
      "            formData.endTime = moment(formData.time[1]).endOf('day').format(dateFormat)",
      "        }",
      "        const pagination = hasPagination ? {",
      "            current,",
      "            size,",
      "        } : {}",
      "        return {",
      "            ...pagination,",
      "            ...formData,",
      "        }",
      "    }",
      "",
      "    // 获取机构列表",
      "    const getList = () => {",
      "        let params = getParams({",
      "            hasPagination: true",
      "        })",
      "        AntiAdviceServer.getList(params).then( async (res: any) => { ",
      "            let result = res.data.result.data || {records: []}",
      "            for (const key in result.records) {",
      "                result.records[key].replyImgUrlArrays = await getOssToSignedUrl(result.records[key].replyImgUrlArray)",
      "            }",
      "            setResult(result)",
      "            currentPagination.total = result.total",
      "            setCurrentPagination(_.cloneDeep(currentPagination))",
      "        }).finally(() => { })",
      "    }",
      "",
      "    const [exportLoading, setExportLoading] = useState(false) // 导出loading",
      "",
      "    //  导出",
      "    const exportFn = () => {",
      "        setExportLoading(true)",
      "        AntiAdviceServer.export(getParams({})).then((res: any) => {",
      "            Util.downLoad('建议管理.xlsx', res.data, message)",
      "        }).finally(() => { setExportLoading(false) })",
      "    };",
      "",
      "    const pageSearchLeft = <SearchForm  ref={searchFormRef}></SearchForm>",
      "    const pageSearchRight = <div >",
      "        <Button type=\"primary\" onClick={search} style={{ marginRight: '14px' }}>查询</Button>",
      "        <Button type=\"default\" onClick={reset} style={{ marginRight: '14px' }}>重置</Button>",
      "        {Util.authorityFn(webElements, 'U040602') && <Button type=\"default\" loading={exportLoading} onClick={exportFn} style={{ marginRight: '14px' }}>导出</Button>}",
      "    </div>;",
      "",
      "    const pagination: TablePaginationConfig = {",
      "        className: \"paginationStyleCommon\",",
      "        showTotal: (total) => `共 \\${total} 条`,",
      "        showSizeChanger: true,",
      "        size: \"default\",",
      "        current: currentPagination?.current,",
      "        total: currentPagination?.total,",
      "        pageSize: currentPagination?.size,",
      "        onChange: (current, size) => {",
      "            currentPagination.current = current",
      "            currentPagination.size = size",
      "            setCurrentPagination(_.cloneDeep(currentPagination))",
      "            getList()",
      "        }",
      "    }",
      "    ",
      "    return (<div className={classNames} >",
      "        <PageHeaderComponent title=\"建议管理\"></PageHeaderComponent>",
      "        <PageContentComponent>",
      "            <PageSearchComponent left={pageSearchLeft} right={pageSearchRight} />",
      "            <PageContentTableComponent>",
      "                {allColumns.length > 0 && <Table dataSource={result?.records || []} rowKey={(record: any) => record.id} columns={allColumns} size=\"small\"  pagination={pagination} bordered={false} scroll={{ x: '100%',  scrollToFirstRowOnChange: true }} />}",
      "            </PageContentTableComponent>",
      "        </PageContentComponent>",
      "    </div>)",
      "};",
      "",
      "export default Index",
      ""
    ]
  },
  "fcSingle": {
    "prefix": "fcSingle",
    "description": "",
    "body": [
      "import classnames from 'classnames';",
      "import React, { FC,  PropsWithChildren } from 'react';",
      "import { StandardProps } from '../../../../types';",
      "",
      "// import \"./index.less\"",
      "",
      "interface IProps extends StandardProps {",
      "}",
      "",
      "const prefixCls = 'index-compoment';",
      "const IndexComponent: FC<IProps> = (props: PropsWithChildren<IProps>) => {",
      "    const { className, children, ...restProps } = props;",
      "",
      "    const classNames = classnames(prefixCls, className);",
      "",
      "    return (",
      "        <section className={classNames} {...restProps} >",
      "        </section>",
      "    );",
      "};",
      "",
      "export default IndexComponent;",
      ""
    ]
  },
  "fcHooks": {
    "prefix": "fcHooks",
    "description": "",
    "body": [
      "import { StandardProps } from '@/types';",
      "import classnames from 'classnames';",
      "import React, { FC,  PropsWithChildren } from 'react';",
      "",
      "import style from \"./search-hooks.module.less\"",
      "",
      "interface IProps extends StandardProps {",
      "}",
      "",
      "const prefixCls = 'search';",
      "const SearchHooks: FC<IProps> = (props: PropsWithChildren<IProps>) => {",
      "    const { className, children, ...restProps } = props;",
      "",
      "    const classNames = classnames(style[prefixCls], className);",
      "",
      "    return (",
      "        <div className={classNames} {...restProps} >",
      "        </div>",
      "    );",
      "};",
      "",
      "export default SearchHooks;",
      ""
    ]
  },
  "fc1Hooks": {
    "prefix": "fc1Hooks",
    "description": "",
    "body": [
      "import { Form } from 'antd';",
      "import classnames from 'classnames';",
      "// import { SearchOutlined } from \"@ant-design/icons\";",
      "import React, { forwardRef, useImperativeHandle } from 'react';",
      "import { useSelector } from 'react-redux';",
      "",
      "// import style from \"./search-hooks.module.less\"",
      "",
      "const dateFormat = \"YYYY/MM/DD HH:mm:ss\";",
      "",
      "interface IProps extends StandardProps {",
      "    // initialValues?: Object; // 表单默认值",
      "    // onFinish: (vaules: any) => void; // 提交表单",
      "}",
      "",
      "const prefixCls = 'search';",
      "const SearchFormHooks = forwardRef((",
      "    props: IProps,",
      "    ref",
      ") => {",
      "    useImperativeHandle(ref, (): any => {",
      "        return {",
      "            form,",
      "        };",
      "    });",
      "    const [form] = Form.useForm();",
      "",
      "    const { areaList, saleList, orgList }: any = useSelector<any>(state => state.selectSliceReducer);",
      "    const { dictionary: {customerType, orgStatus, policeType, auditStatus, orgChannel }}: any = useSelector<any>(state => state.dictionarySliceReducer);",
      "    const { webElements }: any = useSelector<any>(state => state.menuReducer);",
      "",
      "    const { className, ...otherProps} = props;",
      "    const classNames = classnames(style[prefixCls], className);",
      "    return (<div className={classNames} {...otherProps}>",
      "        ",
      "    </div>",
      "    )",
      "})",
      "",
      "export default SearchFormHooks"
    ]
  },
  "fcEdit": {
    "prefix": "fcEdit",
    "description": "",
    "body": [
      "/**",
      " * 开普勒-研判-审核管理-详情",
      " */",
      "",
      " import React, { FC, useEffect, useState } from 'react';",
      " import _ from 'lodash';",
      " import { useSelector } from 'react-redux';",
      " import KeplerAuditServer from '../../../../api/kepler-audit-server';",
      " import PageContentComponent from '../../../../components/page-content-component';",
      " import PageHeaderComponent from '../../../../components/page-header-component';",
      " import { Util } from '../../../../util';",
      " import \"./index.less\";",
      " ",
      " interface ProjectPhaseEditProps {",
      "",
      " }",
      " ",
      " const ProjectPhaseEdit: FC<any> = (props: ProjectPhaseEditProps) => {",
      " ",
      "\t const [detail, setDetail] = useState<any>({})",
      "\t const [stepForm, setStepForm] = useState<any>({})",
      " ",
      "\t useEffect(() => {",
      "\t\t getData()",
      "\t\t // eslint-disable-next-line",
      "\t }, []);",
      " ",
      "\t const getData = () => {",
      "\t\t let params = { userNo: Number(Util.getQueryString('userNo')) }",
      "\t\t return KeplerAuditServer.getDetail(params).then(async (res: any) => {",
      "\t\t\t const { result, result: { historyRespDTO = {} } } = res.data",
      "\t\t\t setDetail(result)",
      "\t\t })",
      "\t }",
      "\t ",
      "\t return <div className=\"project-phase-edit\">",
      "\t\t <PageHeaderComponent isBack backRoute=\"/app/sale-mana/project-phase-mana\" title='编辑项目销售阶段' ></PageHeaderComponent>",
      "\t\t <PageContentComponent>",
      "\t \t\t",
      "\t\t </PageContentComponent>",
      "\t </div>",
      " }",
      " ",
      " export default ProjectPhaseEdit"
    ]
  },
  "mapstate": {
    "prefix": "mapstate",
    "description": "",
    "body": [
      "/**",
      " * @Author zhangyida",
      " * @Time 2020-04-28",
      " * @Description 客户管理 - 机构管理 - 新建机构组件",
      "*/",
      "",
      "import React, { Component } from 'react';",
      "import { connect } from 'react-redux';",
      "",
      "",
      "interface IOrganizationEditComponentProps {",
      "\thistory?: any",
      "\torgNo: string",
      "\tareaListNotAll: any",
      "\tsaleList: any",
      "\tdictionary: any",
      "\tonClose: () => void ",
      "}",
      "",
      "class OrganizationEditComponent extends Component<IOrganizationEditComponentProps, any> {",
      "\tpublic SETMPARAMS: any = {",
      "\t\tsize: 10,",
      "\t\tcurrent: 1,",
      "\t}",
      "",
      "\tpublic formRef: any = React.createRef<FormInstance>();",
      "",
      "\tconstructor(props: any) {",
      "\t\tsuper(props);",
      "\t\tthis.state = {",
      "\t",
      "\t\t}",
      "\t}",
      "",
      "\tasync componentDidMount() {",
      "\t\t// let id: any = Util.getQueryString('orgNo');",
      "\t\tlet id: any = this.props.orgNo",
      "\t\tif (id) {",
      "\t\t\tthis.ID = id;",
      "\t\t\tawait this.getDetail({ orgNo: id });",
      "\t\t\tthis.formRef && this.formRef.current.setFieldsValue(this.RECORDS);",
      "\t\t} else {",
      "\t\t\t// 新增的时候 给登录方式和登录状态负值",
      "\t\t\tthis.formRef && this.formRef.current.setFieldsValue({",
      "\t\t\t\torgStatus: 'NORMAL',",
      "\t\t\t\tpoliceType: '26',",
      "\t\t\t\t// customerType: ''",
      "\t\t\t});",
      "\t\t}",
      "\t",
      "\t}",
      "\t",
      "\trender() {",
      "\t\tconst FormStyle = {",
      "\t\t\twidth: '490px',",
      "\t\t\tmarginBottom: '20px'",
      "\t\t}",
      "\t\tconst orgChannel = this?.RECORDS?.orgChannel || 1",
      "\t\tconst layout = {",
      "\t\t\tlabelCol: { span: 4 },",
      "\t\t\twrapperCol: { span: 20 },",
      "\t\t};",
      "\t\treturn (<></>)",
      "\t}",
      "}",
      "",
      "const mapStateToProps = (state: any) => {",
      "\tconst { areaListNotAll, saleList } =  state.selectSliceReducer",
      "\tconst { dictionary } =  state.dictionarySliceReducer",
      "\treturn {",
      "\t\tareaListNotAll,",
      "\t\tdictionary,",
      "\t\twebElements: state.menuReducer.webElements,",
      "\t\tsaleList",
      "\t}",
      "}",
      "",
      "const mapActionToProps = (dispatch: any) => {",
      "\treturn {",
      "\t\tsetOrgList: () => dispatch(setOrgList()),",
      "\t};",
      "  };",
      "  ",
      "",
      "export default connect(mapStateToProps, mapActionToProps)(OrganizationEditComponent)"
    ]
  },
  "widgets": {
    "prefix": "widgets",
    "description": "",
    "body": [
      "import classnames from 'classnames';",
      "import React from 'react';",
      "import { StandardProps } from '../types';",
      "",
      "interface IProps extends StandardProps {",
      "",
      "}",
      "",
      "const prefixCls = 'rejecte-reasond-widgets';",
      "const RejecteReasondWidgets = ( props: IProps) => {",
      "",
      "    const { className, ...otherProps} = props;",
      "    const classNames = classnames(prefixCls, className);",
      "    return (<div className={classNames} {...otherProps}>",
      "        ",
      "    </div>",
      "    )",
      "}",
      "",
      "export default RejecteReasondWidgets"
    ]
  },
  "fcModal": {
    "prefix": "fcModal",
    "description": "",
    "body": [
      "import { StandardProps } from '@/types';",
      "import classnames from 'classnames';",
      "import React, { FC, PropsWithChildren, useEffect, useState } from 'react';",
      "import { Form, Modal, Input, Radio } from 'antd';",
      "",
      "interface IProps extends StandardProps {",
      "    visible: boolean",
      "    onOk: (values: any) => void;",
      "    onCancel: () => void;",
      "    detail?: any",
      "}",
      "",
      "const prefixCls = 'index-modal';",
      "const IndexModalComponent: FC<IProps> = (props: PropsWithChildren<IProps>) => {",
      "    const { className, children, visible, onOk, onCancel, detail, ...restProps } = props;",
      "    const [form] = Form.useForm();",
      "",
      "    const classNames = classnames(prefixCls, className);",
      "",
      "    return (",
      "        <Modal",
      "            visible={visible}",
      "            title=\"数据范围\"",
      "            onCancel={onCancel}",
      "            onOk={() => {",
      "                form",
      "                    .validateFields()",
      "                    .then(values => {",
      "                        form.resetFields();",
      "                        // onCreate(values);",
      "                    })",
      "                    .catch(info => {",
      "                        console.log('Validate Failed:', info);",
      "                    });",
      "            }}",
      "            className={classNames} {...restProps}",
      "        >",
      "            <Form",
      "                form={form}",
      "                layout=\"vertical\"",
      "                style={{ marginTop: 16 }}",
      "                initialValues={{}}",
      "            >",
      "                <Form.Item",
      "                    name=\"title\"",
      "                    label=\"Title\"",
      "                    rules={[{ required: true, message: 'Please input the title of collection!' }]}",
      "                >",
      "                    <Input />",
      "                </Form.Item>",
      "                <Form.Item name=\"description\" label=\"Description\">",
      "                    <Input type=\"textarea\" />",
      "                </Form.Item>",
      "                <Form.Item name=\"modifier\" className=\"collection-create-form_last-form-item\">",
      "                    <Radio.Group>",
      "                        <Radio value=\"public\">Public</Radio>",
      "                        <Radio value=\"private\">Private</Radio>",
      "                    </Radio.Group>",
      "                </Form.Item>",
      "            </Form>",
      "        </Modal>",
      "    );",
      "};",
      "",
      "export default IndexModalComponent;",
      "",
      "",
      ""
    ]
  }
}